<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function asset_smart_menu($may_cache){
  $items = array();
  if(!$may_cache){
    if(arg(0) == 'asset' && is_numeric(arg(1)) && arg(2) == 'preview' && arg(3)){
      $folder = asset_load(arg(1));
      $folder_items = asset_smart_fetch($folder);
      $asset = asset_smart_pseudo_load($folder_items[arg(3)]);
      $items[] = array(
        'path' => 'asset/'. arg(1) .'/preview/' . arg(3),
        'title' => $asset->title,
        'type' => MENU_CALLBACK,
        'access' => user_access('access content'),
        'callback' => 'asset_smart_view_temp_asset',
        'callback arguments' => array($folder, $asset),
      );
    }
  }
  return $items;
}

/**
 * Implementation of hook_asset_type().
 */
function asset_smart_asset_type($op = 'info', &$asset = NULL){
  switch($op){
    case 'info':
      return array(
        'smart_folder' => array(
          'name' => t('Smart Folder'),
          'module' => 'asset_smart',
          'description' => t('Create a new, automatically updating smart folder.'),
          'icon' => drupal_get_path('module', 'asset') .'/icons/folder.rss.png',
        ),
      ); 
      break;
    default:
      $function = 'asset_smart_'. $op;
      if(function_exists($function)){
        return $function($asset);
      }
      break;
  }
}

/**
 * Implementation of hook_asset_type('view')
 */
function asset_smart_view($asset){
  $items = asset_smart_fetch($asset);

  foreach($items as $i => $item){
    $items[$i] = asset_smart_pseudo_load($item);
  }

  if($asset->aid){
    $parent = asset_load($asset->pid);
    $parent->link_title = '..';
    array_unshift($items, $parent);
  }
  
  return theme('asset_smart_browse', $asset, $items);  
}

/**
 * Theme the smart folder to display a browsable list of pseudo-assets
 */
function theme_asset_smart_browse($folder, $items = array()){
  $size = 64;
  $links = array();
  foreach($items as $guid => $asset){
    $icon = theme('asset_icon', $asset, $size);
    if($asset->aid >= 0){
      $links[] = l($icon, 'asset/'. $asset->aid, array(), NULL, NULL, FALSE, TRUE);
    }
    else{
      $links[] = l($icon, 'asset/'. $folder->aid .'/preview/'. $guid, array(), NULL, NULL, FALSE, TRUE);
    }
  }
  $output .= '<ul class="asset-directory-browse clear-block">';
  foreach($links as $link){
    $output .= '<li>'. $link .'</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Implementation of hook_asset_type('icon')
 */
function asset_smart_icon($asset){
  $icon = drupal_get_path('module', 'asset') . '/icons/folder.rss.png';
  if (file_exists($icon)) {
    return $icon;
  }
}

/**
 * Implementation of hook_asset_type('load')
 */
function asset_smart_load($asset){
  $files = array();
  $result = db_query('SELECT * FROM {asset_smart} WHERE aid=%d', $asset->aid);
  $row = db_fetch_array($result);
  return array('smart_folder' => $row);
}

/**
 * Implementation of hook_asset_type('form')
 */
function asset_smart_form($asset){
  $form['smart_folder'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search Settings'),
    '#theme' => 'asset_smart_form',
    '#tree' => true,
  );
  
  $form['smart_folder']['provider'] = array('#type' => 'hidden', '#value' => 'youtube');
  
  $form['smart_folder']['search_type'] = array(
    '#type' => 'radios',
    '#default_value' => $asset->smart_folder['search_type'],
    '#options' => array(
      'user' => t('Username'),
      'tag' => t('Tag'),
      'url' => t('Feed URL'),
    ),
    '#required' => TRUE,
  );  
  $form['smart_folder']['search_value']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => $asset->smart_folder['search_type'] == 'user' ? $asset->smart_folder['search_value'] : '',
    '#size' => 20,
  );
  $form['smart_folder']['search_value']['tag'] = array(
    '#type' => 'textfield',
    '#title' => t('Tag'),
    '#default_value' => $asset->smart_folder['search_type'] == 'tag' ? $asset->smart_folder['search_value'] : '',
    '#size' => 20,
  );
  $form['smart_folder']['search_value']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Feed URL'),
    '#default_value' => $asset->smart_folder['search_type'] == 'url' ? $asset->smart_folder['search_value'] : '',
    '#size' => 60,
  );
  
  return $form;
}

/**
 * Theme the smart_folder portion of the asset_form
 */
function theme_asset_smart_form($form){
  $rows = array();
  $header = array();
  
  foreach(element_children($form['search_value']) as $key){
    $form['search_value'][$key]['#title'] = NULL;
    $rows[] = array(
      drupal_render($form['search_type'][$key]),
      drupal_render($form['search_value'][$key]),
    );
  }
  $form['#value'] = theme('table', $header, $rows);
  return drupal_render($form);
}

/**
 * Implementation of hook_asset_type('validate')
 */
function asset_smart_validate($asset){
  $type = $asset->smart_folder['search_type'];
  if(!$asset->smart_folder['search_value'][$type]){
    form_set_error('smart_folder][search_value]['.$type, t('%type is required', array('%type'=>$type)));
  }
}

/**
 * Implementation of hook_asset_type('insert')
 */
function asset_smart_insert(&$asset){
  $asset->smart_folder['search_value'] = $asset->smart_folder['search_value'][$asset->smart_folder['search_type']];
  $asset->smart_folder['url'] = asset_smart_search_url($asset->smart_folder['search_type'], $asset->smart_folder['search_value']);
  db_query('INSERT INTO {asset_smart} (aid, provider, url, search_type, search_value) VALUES (%d, "%s", "%s", "%s", "%s")', 
    $asset->aid, $asset->smart_folder['provider'], $asset->smart_folder['url'], $asset->smart_folder['search_type'], $asset->smart_folder['search_value']);
}

/**
 * Implementation of hook_asset_type('update')
 */
function asset_smart_update(&$asset){
  $asset->smart_folder['search_value'] = $asset->smart_folder['search_value'][$asset->smart_folder['search_type']];
  $asset->smart_folder['url'] = asset_smart_search_url($asset->smart_folder['search_type'], $asset->smart_folder['search_value']);
  db_query('UPDATE {asset_smart} SET provider="%s", url="%s", search_type="%s", search_value="%s" WHERE aid=%d', 
    $asset->smart_folder['provider'], $asset->smart_folder['url'], $asset->smart_folder['search_type'], $asset->smart_folder['search_value'], $asset->aid);
}

/**
 * Implementation of hook_asset_type('delete')
 */
function asset_smart_delete($asset){
  db_query("DELETE FROM {asset_smart} WHERE aid=%d", $asset->aid);  
}

/**
 * Fetch a RSS feed and return its items as pseudo-assets
 */
function asset_smart_fetch($asset, $reset = FALSE){
  $cid = 'asset_smart:'. $asset->aid;
  if(!$reset && ($cache = cache_get($cid)) && !empty($cache->data)){
    $items = unserialize($cache->data);
//    drupal_set_message(t('The results you are seeing are cached for 5 minutes.'));
  }
  else{
    include_once(drupal_get_path('module', 'asset_smart') .'/asset_smart.parser.inc');
    $result = drupal_http_request($asset->smart_folder['url']);
    // Process HTTP response code.
    switch ($result->code) {
      case 301:
        $feed['url'] = $result->redirect_url;
        $asset->url = $result->redirect_url;
        asset_smart_update($asset);
        watchdog('asset', t('Updated URL for Smart Folder %title to %url.', array('%title' => $asset->title, '%url' => $asset->url)));
        // fall through
        
      case 200:
      case 302:
      case 307:
        break;
        
      default:
        watchdog('asset', t('The feed for Smart Folder %title seems to be broken, due to "%error".', array('%title' => $asset->title, '%error' => $result->code .' '. $result->error)), WATCHDOG_WARNING);
        drupal_set_message(t('The feed from Smart Folder %title seems to be broken, because of error "%error".', array('%title' => $asset->title, '%error' => $result->code .' '. $result->error)));
    }
    $items = asset_smart_parse_feed($result->data, $asset);
    // cache for 5 minute
    cache_set($cid, 'cache', serialize($items), time() + 300);
  }
  
  return $items;
}

/**
 * Build a pseudo-asset for RSS items.
 */
function asset_smart_pseudo_load($asset){
  asset_embed_load_providers();
  $asset->type = 'embed';
  $asset->embed = asset_embed_extract_id('youtube', $asset->link);
  $asset->formatters = asset_get_formatters($asset);
  return $asset;
}

/**
 * Menu callback for asset/[aid]/preview/[guid]
 */
function asset_smart_view_temp_asset($folder, $asset){
  return asset_view($asset);
}

/**
 * Build a url based on search type and search value
 */
function asset_smart_search_url($type, $value){
  switch($type){
    case 'user':
      return 'http://www.youtube.com/rss/user/'. $value .'/videos.rss';
    case 'tag':
      return 'http://www.youtube.com/rss/tag/'. $value .'.rss';
    case 'feed':
    default:
      return $value;
  }
}
